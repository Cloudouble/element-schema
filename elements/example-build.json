{
	"definitions": {
		"element-icon": "class extends window.LiveElement.Element.elements[componentName] {\n            constructor() {\n                super()\n                let shadowRoot = this.shadowRoot || this.attachShadow({mode: 'open'})\n                shadowRoot.innerHTML = ''\n                let styleNode = document.createElement('style')\n                styleNode.innerHTML = window.LiveElement.Element.styles[componentName]\n                shadowRoot.appendChild(styleNode)\n                let templateNode = document.createElement('template')\n                templateNode.innerHTML = window.LiveElement.Element.templates[componentName]\n                shadowRoot.appendChild(templateNode.content.cloneNode(true))\n            }\n        }",
		"element-symbol": "class extends window.LiveElement.Element.elements[componentName] {\n            constructor() {\n                super()\n                let shadowRoot = this.shadowRoot || this.attachShadow({mode: 'open'})\n                shadowRoot.innerHTML = ''\n                let styleNode = document.createElement('style')\n                styleNode.innerHTML = window.LiveElement.Element.styles[componentName]\n                shadowRoot.appendChild(styleNode)\n                let templateNode = document.createElement('template')\n                templateNode.innerHTML = window.LiveElement.Element.templates[componentName]\n                shadowRoot.appendChild(templateNode.content.cloneNode(true))\n            }\n        }",
		"element-link": "class extends window.LiveElement.Element.elements[componentName] {\n            constructor() {\n                super()\n                let shadowRoot = this.shadowRoot || this.attachShadow({mode: 'open'})\n                shadowRoot.innerHTML = ''\n                let styleNode = document.createElement('style')\n                styleNode.innerHTML = window.LiveElement.Element.styles[componentName]\n                shadowRoot.appendChild(styleNode)\n                let templateNode = document.createElement('template')\n                templateNode.innerHTML = window.LiveElement.Element.templates[componentName]\n                shadowRoot.appendChild(templateNode.content.cloneNode(true))\n            }\n        }",
		"element-button": "class extends window.LiveElement.Element.elements[componentName] {\n            constructor() {\n                super()\n                let shadowRoot = this.shadowRoot || this.attachShadow({mode: 'open'})\n                shadowRoot.innerHTML = ''\n                let styleNode = document.createElement('style')\n                styleNode.innerHTML = window.LiveElement.Element.styles[componentName]\n                shadowRoot.appendChild(styleNode)\n                let templateNode = document.createElement('template')\n                templateNode.innerHTML = window.LiveElement.Element.templates[componentName]\n                shadowRoot.appendChild(templateNode.content.cloneNode(true))\n            }\n        }"
	},
	"files": {
		"Icon": "<style>\nslot {\n    contain: content;\n    display: inline-block;\n    font-family: var(--font-icon, 'Material Icons');\n    font-weight: normal;\n    font-style: normal;\n    font-size: var(--size-icon, 24px);\n    color: var(--color-icon, var(--color-text), black);\n    filter: var(--filter-icon, var(--filter-text), none);\n    line-height: 1;\n    text-transform: none;\n    letter-spacing: normal;\n    word-wrap: normal;\n    white-space: nowrap;\n    direction: ltr;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    -moz-osx-font-smoothing: grayscale;\n    font-feature-settings: 'liga';\n}\n</style>\n<template>\n    <slot></slot>\n</template>\n<script>\n    /* global HTMLElement */\n    class Icon extends window.LiveElement.Element.elements.HTMLElement {\n        static get css() {\n            return (super.css || []).concat(\n                'https:\\/\\/fonts.googleapis.com\\/icon?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone' \n            )\n        }\n    }\n</script>\n",
		"Link": "<style>\n:host {\n    cursor: pointer;\n    position: relative;\n}\n\n::slotted(p-icon) {\n    float: right;\n    position: relative;\n}\n</style>\n<template>\n    <a><slot></slot></a>\n</template>\n<script>\n    /* global */\n    class Link extends window.LiveElement.Element.elements.Symbol {\n        \n        constructor() {\n            super()\n        }\n        \n        connectedCallback() {\n            this.addEventListener('click', event => {\n                if (this.href) {\n                    this.target ? window.open(this.href, this.target) : window.location = this.href\n                }\n            })\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('href', 'target')\n        }\n\n        href($this, value) {\n            return value || ($this.name ? `#${$this.name}` : '') || ''\n        }\n\n    }\n</script>\n",
		"Symbol": "<style>\n:host {\n    contain: content;\n    display: inline-block;\n}\n\n:host element-icon {\n    vertical-align: middle;\n    margin-right: 0.2em;\n}\n</style>\n<template>\n    <span><slot></slot></span>\n</template>\n<script>\n    /* global HTMLElement */\n    class Symbol extends window.LiveElement.Element.elements.HTMLElement {\n\n        constructor() {\n            super()\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('icon', 'name')\n        }\n\n        name($this, value) {\n            return (value ? value : $this.innerText).replace('[^a-zA-Z0-9\\-]+', '-').toLowerCase()\n        }\n\n        icon($this, value) {\n            var iconNode\n            if (value && typeof value === 'string') {\n                iconNode = $this.shadowRoot.querySelector('element-icon')\n                if (!iconNode) {\n                    iconNode = document.createElement('element-icon')\n                    $this.shadowRoot.prepend(iconNode)\n                }\n                if ((value.slice(0,8) == 'https:\\/\\/') || (value.slice(0,5) == 'data:')) {\n                    $this.setAttribute('style', `background-image: url(${value}); background-size: cover; border-radius: 100%;`)\n                    iconNode.innerHTML = ''\n                } else {\n                    iconNode.innerHTML = value\n                }\n                return value\n            } else {\n                iconNode = $this.shadowRoot.querySelector('element-icon')\n                if (iconNode) {\n                    iconNode.remove()\n                }\n            }\n        }\n\n    }\n</script>\n",
		"Button": "<style>\n:host {\n    --size-button: 72px;\n    --grid: calc(var(--size-button, 72px) / 12);\n    display: inline-block;\n    background-color: transparent;\n    border-width: 0;\n    border-style: none;\n    border-color: transparent;\n    border-image: none;\n    padding: 0;\n    overflow: hidden;\n    text-align: var(--button-text-align, center);\n    width: var(--width-button, var(--size-button, 72px));\n    height: var(--height-button, var(--size-button, 72px));\n    margin-left: calc(var(--grid, 6px) * 2);\n    margin-top: calc(var(--grid, 6px) * 2);\n    cursor: pointer;\n    opacity: 0.8;\n}\n\n:host element-icon {\n    display: var(--icon-display, block);\n    --size-icon: calc(var(--grid, 6px) * 6);\n    margin-top: var(--icon-margin-top, calc(var(--grid, 6px) * 1));\n    cursor: pointer;\n}\n\n:host label {\n    display: var(--label-display, block);\n    font-weight: var(--label-font-weight, bold);\n    font-size: var(--label-font-size, calc(var(--grid, 6px) * 2));\n    cursor: pointer;\n    margin-top: var(--label-margin-top, 0);\n    margin-left: var(--label-margin-left, 0);\n    vertical-align: var(--label-vertical-align, baseline);\n}\n\n:host(:hover) {\n    opacity: 1;\n}\n\n:host-context([disabled=true]), :host-context([disabled=true]:hover) {\n    opacity: 0.5;\n    cursor: default;\n}\n:host-context([disabled=true]) element-icon, :host-context([disabled=true]:hover) element-icon, :host-context([disabled=true]) label, :host-context([disabled=true]:hover) label {\n    cursor: default;\n}\n</style>\n<template>\n    <label><slot></slot></label>\n</template>\n<script>\n    /* global */\n    class Button extends window.LiveElement.Element.elements.Link {\n\n        constructor() {\n            super()\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('disabled')\n        }\n\n        connectedCallback() {\n            var $this = this\n            $this.addEventListener('click', event => {\n                if (String($this.disabled) !== 'true' && $this.href) {\n                    if ($this.href[0] === '#') {\n                        window.location.hash = $this.href\n                    } else if ($this.href.slice(0,8) == 'https:\\/\\/') {\n                        $this.target ? window.open($this.href, $this.target) : window.location = $this.href\n                    }\n                } \n            })\n            if (!$this.innerText) {\n                var icon = $this.shadowRoot.querySelector('element-icon')\n                if (icon) {\n                    icon.setAttribute('style', `--size-icon: ${window.getComputedStyle($this).getPropertyValue('--size-button')}; margin-top: 0;`)\n                }\n            }\n        }\n\n    }\n</script>\n"
	},
	"styles": {
		"Icon": "/** element-icon styles */\n\nslot {\n    contain: content;\n    display: inline-block;\n    font-family: var(--font-icon, 'Material Icons');\n    font-weight: normal;\n    font-style: normal;\n    font-size: var(--size-icon, 24px);\n    color: var(--color-icon, var(--color-text), black);\n    filter: var(--filter-icon, var(--filter-text), none);\n    line-height: 1;\n    text-transform: none;\n    letter-spacing: normal;\n    word-wrap: normal;\n    white-space: nowrap;\n    direction: ltr;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    -moz-osx-font-smoothing: grayscale;\n    font-feature-settings: 'liga';\n}",
		"Symbol": "/** element-symbol styles */\n\n:host {\n    contain: content;\n    display: inline-block;\n}\n\n:host element-icon {\n    vertical-align: middle;\n    margin-right: 0.2em;\n}",
		"Link": "/** element-symbol styles */\n\n:host {\n    contain: content;\n    display: inline-block;\n}\n\n:host element-icon {\n    vertical-align: middle;\n    margin-right: 0.2em;\n}\n\n\n/** element-link styles */\n\n:host {\n    cursor: pointer;\n    position: relative;\n}\n\n::slotted(p-icon) {\n    float: right;\n    position: relative;\n}",
		"Button": "/** element-symbol styles */\n\n:host {\n    contain: content;\n    display: inline-block;\n}\n\n:host element-icon {\n    vertical-align: middle;\n    margin-right: 0.2em;\n}\n\n\n/** element-link styles */\n\n:host {\n    cursor: pointer;\n    position: relative;\n}\n\n::slotted(p-icon) {\n    float: right;\n    position: relative;\n}\n\n\n/** element-button styles */\n\n:host {\n    --size-button: 72px;\n    --grid: calc(var(--size-button, 72px) / 12);\n    display: inline-block;\n    background-color: transparent;\n    border-width: 0;\n    border-style: none;\n    border-color: transparent;\n    border-image: none;\n    padding: 0;\n    overflow: hidden;\n    text-align: var(--button-text-align, center);\n    width: var(--width-button, var(--size-button, 72px));\n    height: var(--height-button, var(--size-button, 72px));\n    margin-left: calc(var(--grid, 6px) * 2);\n    margin-top: calc(var(--grid, 6px) * 2);\n    cursor: pointer;\n    opacity: 0.8;\n}\n\n:host element-icon {\n    display: var(--icon-display, block);\n    --size-icon: calc(var(--grid, 6px) * 6);\n    margin-top: var(--icon-margin-top, calc(var(--grid, 6px) * 1));\n    cursor: pointer;\n}\n\n:host label {\n    display: var(--label-display, block);\n    font-weight: var(--label-font-weight, bold);\n    font-size: var(--label-font-size, calc(var(--grid, 6px) * 2));\n    cursor: pointer;\n    margin-top: var(--label-margin-top, 0);\n    margin-left: var(--label-margin-left, 0);\n    vertical-align: var(--label-vertical-align, baseline);\n}\n\n:host(:hover) {\n    opacity: 1;\n}\n\n:host-context([disabled=true]), :host-context([disabled=true]:hover) {\n    opacity: 0.5;\n    cursor: default;\n}\n:host-context([disabled=true]) element-icon, :host-context([disabled=true]:hover) element-icon, :host-context([disabled=true]) label, :host-context([disabled=true]:hover) label {\n    cursor: default;\n}"
	},
	"classes": {
		"element-icon": "Icon",
		"element-symbol": "Symbol",
		"element-link": "Link",
		"element-button": "Button"
	},
	"scripts": {
		"Icon": "class extends window.LiveElement.Element.elements.HTMLElement {\n        static get css() {\n            return (super.css || []).concat(\n                'https:\\/\\/fonts.googleapis.com\\/icon?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone' \n            )\n        }\n    }",
		"Symbol": "class extends window.LiveElement.Element.elements.HTMLElement {\n\n        constructor() {\n            super()\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('icon', 'name')\n        }\n\n        name($this, value) {\n            return (value ? value : $this.innerText).replace('[^a-zA-Z0-9\\-]+', '-').toLowerCase()\n        }\n\n        icon($this, value) {\n            var iconNode\n            if (value && typeof value === 'string') {\n                iconNode = $this.shadowRoot.querySelector('element-icon')\n                if (!iconNode) {\n                    iconNode = document.createElement('element-icon')\n                    $this.shadowRoot.prepend(iconNode)\n                }\n                if ((value.slice(0,8) == 'https:\\/\\/') || (value.slice(0,5) == 'data:')) {\n                    $this.setAttribute('style', `background-image: url(${value}); background-size: cover; border-radius: 100%;`)\n                    iconNode.innerHTML = ''\n                } else {\n                    iconNode.innerHTML = value\n                }\n                return value\n            } else {\n                iconNode = $this.shadowRoot.querySelector('element-icon')\n                if (iconNode) {\n                    iconNode.remove()\n                }\n            }\n        }\n\n    }",
		"Link": "class extends window.LiveElement.Element.elements.Symbol {\n        \n        constructor() {\n            super()\n        }\n        \n        connectedCallback() {\n            this.addEventListener('click', event => {\n                if (this.href) {\n                    this.target ? window.open(this.href, this.target) : window.location = this.href\n                }\n            })\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('href', 'target')\n        }\n\n        href($this, value) {\n            return value || ($this.name ? `#${$this.name}` : '') || ''\n        }\n\n    }",
		"Button": "class extends window.LiveElement.Element.elements.Link {\n\n        constructor() {\n            super()\n        }\n\n        static get observedAttributes() {\n            return (super.observedAttributes || []).concat('disabled')\n        }\n\n        connectedCallback() {\n            var $this = this\n            $this.addEventListener('click', event => {\n                if (String($this.disabled) !== 'true' && $this.href) {\n                    if ($this.href[0] === '#') {\n                        window.location.hash = $this.href\n                    } else if ($this.href.slice(0,8) == 'https:\\/\\/') {\n                        $this.target ? window.open($this.href, $this.target) : window.location = $this.href\n                    }\n                } \n            })\n            if (!$this.innerText) {\n                var icon = $this.shadowRoot.querySelector('element-icon')\n                if (icon) {\n                    icon.setAttribute('style', `--size-icon: ${window.getComputedStyle($this).getPropertyValue('--size-button')}; margin-top: 0;`)\n                }\n            }\n        }\n\n    }"
	},
	"tags": {
		"Icon": "element-icon",
		"Symbol": "element-symbol",
		"Link": "element-link",
		"Button": "element-button"
	},
	"templates": {
		"Icon": "<slot></slot>",
		"Symbol": "<span><slot></slot></span>",
		"Link": "<a><slot></slot></a>",
		"Button": "<label><slot></slot></label>"
	}
}